import os
import requests
import json
import google.generativeai as genai

# 環境変数からSecretsを読み込む
GEMINI_API_KEY = os.environ.get("GOOGLE_API_KEY")
GITHUB_TOKEN = os.environ.get("GEMINI_ACCESS_TOKEN")

# Gemini APIの設定
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

def get_pr_diff(repo_full_name, pr_number, github_token):
	"""GitHub APIからPRの差分を取得する"""
	headers = {
		"Authorization": f"token {github_token}",
		"Accept": "application/vnd.github.v3.diff",
	}
	url = f"https://api.github.com/repos/{repo_full_name}/pulls/{pr_number}"
	response = requests.get(url, headers=headers)
	response.raise_for_status() # HTTPエラーがあれば例外を発生

	diff_url = response.json()['diff_url']
	diff_response = requests.get(diff_url, headers=headers)
	diff_response.raise_for_status()
	return diff_response.text

def post_pr_comment(repo_full_name, pr_number, comment_body, github_token):
	"""GitHub APIを使ってPRにコメントを投稿する"""
	headers = {
		"Authorization": f"token {github_token}",
		"Accept": "application/vnd.github.v3+json",
	}
	url = f"https://api.github.com/repos/{repo_full_name}/issues/{pr_number}/comments"
	payload = {"body": comment_body}
	response = requests.post(url, headers=headers, data=json.dumps(payload))
	response.raise_for_status()
	print(f"Comment posted successfully to PR #{pr_number}")

def main():
	# GitHub Actionsから渡される環境変数
	repo_full_name = os.environ.get("GITHUB_REPOSITORY") # 例: octocat/Spoon-Knife
	pr_number = os.environ.get("GITHUB_REF").split('/')[2] # 例: refs/pull/123/merge -> 123

	if not repo_full_name or not pr_number:
		print("Error: GITHUB_REPOSITORY or GITHUB_REF not found.")
		exit(1)

	print(f"Processing PR #{pr_number} in {repo_full_name}...")

	try:
		# 1. PR差分を取得
		pr_diff = get_pr_diff(repo_full_name, pr_number, GITHUB_TOKEN)
		print("PR diff fetched.")

		# トークン制限に備えて差分を短縮する（オプション）
		# 例: 最初の20000文字に制限（Gemini Proのコンテキストウィンドウは32768トークン）
		# 実際のトークン数カウントはもっと複雑ですが、目安として。
		if len(pr_diff) > 20000:
			pr_diff = pr_diff[:20000] + "\n... (diff truncated due to length)"
			print("PR diff truncated.")


		# 2. Geminiにレビューを依頼するプロンプトを作成
		prompt = f"""
		You are an experienced software engineer performing a code review.
		Review the following Pull Request (PR) diff.
		Identify potential bugs, areas for improvement (e.g., performance, readability), security concerns, and suggest additional test cases if necessary.
		Provide your feedback in a concise, bulleted list.

		--- PR Diff ---
		{pr_diff}
		--- PR Diff End ---
		"""
		print("Sending diff to Gemini for review...")
		response = model.generate_content(prompt)
		review_comment = response.text
		print("Review generated by Gemini.")

		# 3. 生成されたレビューコメントをPRに投稿
		comment_body = f"## Gemini AI Code Review Assistant\n\n{review_comment}"
		post_pr_comment(repo_full_name, pr_number, comment_body, GITHUB_TOKEN)
		print("Review comment posted.")

	except requests.exceptions.RequestException as e:
		print(f"GitHub API Error: {e}")
		exit(1)
	except genai.types.BlockedPromptException as e:
		print(f"Gemini API Error: Prompt was blocked - {e}")
		exit(1)
	except Exception as e:
		print(f"An unexpected error occurred: {e}")
		exit(1)

if __name__ == "__main__":
	main()