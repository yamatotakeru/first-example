import os
import requests
import json
import google.generativeai as genai

# 環境変数からSecretsを読み込む
GEMINI_API_KEY = os.environ.get("GOOGLE_API_KEY")
# ★ここを修正★: GITHUB_TOKEN の代わりに、設定したシークレット名を使う
MY_GITHUB_PAT = os.environ.get("GEMINI_ACCESS_TOKEN") # <-- この行を修正

TOKEN_LEN=1000

# Gemini APIの設定
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('models/gemini-1.5-pro')
# model = genai.GenerativeModel('models/gemini-1.5-flash')
# 利用可能なモデルをリストアップしてデバッグ出力
print("Listing available Gemini models...")
# for m in genai.list_models():
# 	# generateContent をサポートするモデルのみをフィルタリング
# 	if 'generateContent' in m.supported_generation_methods:
# 		print(f"  - Model: {m.name}, Description: {m.description}")
# 	print("Finished listing models.")

def get_pr_diff(repo_full_name, pr_number, github_token):
	"""GitHub APIからPRの差分を取得する"""
	headers = {
		"Authorization": f"token {github_token}",
		# ★ここを修正！★
		# 最初のPRメタデータ取得時には、JSON形式をリクエストする
		"Accept": "application/vnd.github.v3+json", 
	}
	# まずPRのメタデータを取得
	pr_url = f"https://api.github.com/repos/{repo_full_name}/pulls/{pr_number}"
	print(f"Requesting PR metadata from: {pr_url}")
	response = requests.get(pr_url, headers=headers)
	
	print(f"PR metadata response status: {response.status_code}")
	# ★ここを修正！★ メタデータ応答はJSONなので、json.dumpsで整形して出力
	print(f"PR metadata response text (first 500 chars): {json.dumps(response.json(), indent=2)[:500]}") 
	
	response.raise_for_status()
	
	try:
		pr_data = response.json()
		diff_url = pr_data['diff_url']
	except json.JSONDecodeError as e:
		print(f"Error decoding JSON from PR metadata response: {e}")
		print(f"Response text was: {response.text}")
		raise
	
	print(f"Requesting diff from: {diff_url}")
	# ★ここを修正！★ diff_urlにアクセスする際は、再度diff形式をリクエストするAcceptヘッダーを使う
	diff_headers = {
		"Authorization": f"token {github_token}",
		"Accept": "application/vnd.github.v3.diff",
	}
	diff_response = requests.get(diff_url, headers=diff_headers)
	
	print(f"Diff response status: {diff_response.status_code}")
	print(f"Diff response text (first 500 chars): {diff_response.text[:500]}")
	
	diff_response.raise_for_status()
	return diff_response.text

def post_pr_comment(repo_full_name, pr_number, comment_body, github_token): # ★引数名も変更★
	"""GitHub APIを使ってPRにコメントを投稿する"""
	headers = {
		"Authorization": f"token {github_token}", # ★ここも修正★
		"Accept": "application/vnd.github.v3+json",
	}
	url = f"https://api.github.com/repos/{repo_full_name}/issues/{pr_number}/comments"
	payload = {"body": comment_body}
	response = requests.post(url, headers=headers, data=json.dumps(payload))
	response.raise_for_status()
	print(f"Comment posted successfully to PR #{pr_number}")

def main():
	repo_full_name = os.environ.get("GITHUB_REPOSITORY")
	pr_number = os.environ.get("GITHUB_REF").split('/')[2]

	if not repo_full_name or not pr_number:
		print("Error: GITHUB_REPOSITORY or GITHUB_REF not found.")
		exit(1)

	print(f"Processing PR #{pr_number} in {repo_full_name}...")

	try:
		# 1. PR差分を取得
		# ★引数を修正★: MY_GITHUB_PAT を渡す
		pr_diff = get_pr_diff(repo_full_name, pr_number, MY_GITHUB_PAT) 
		print("PR diff fetched.")

		if len(pr_diff) > TOKEN_LEN:
			pr_diff = pr_diff[:TOKEN_LEN] + "\n... (diff truncated due to length)"
			print("PR diff truncated.")

		prompt = f"""
		You are an experienced software engineer performing a code review.
		Review the following Pull Request (PR) diff.
		Identify potential bugs, areas for improvement (e.g., performance, readability), security concerns, and suggest additional test cases if necessary.
		Provide your feedback in a concise, bulleted list.

		--- PR Diff ---
		{pr_diff}
		--- PR Diff End ---
		"""
		print("Sending diff to Gemini for review...")
		response = model.generate_content(prompt)
		review_comment = response.text
		print("Review generated by Gemini.")

		# 3. 生成されたレビューコメントをPRに投稿
		comment_body = f"## Gemini AI Code Review Assistant\n\n{review_comment}"
		# ★引数を修正★: MY_GITHUB_PAT を渡す
		post_pr_comment(repo_full_name, pr_number, comment_body, MY_GITHUB_PAT) 
		print("Review comment posted.")

	except requests.exceptions.RequestException as e:
		print(f"GitHub API Error: {e}")
		exit(1)
	except genai.types.BlockedPromptException as e:
		print(f"Gemini API Error: Prompt was blocked - {e}")
		exit(1)
	except Exception as e:
		print(f"An unexpected error occurred: {e}")
		exit(1)

if __name__ == "__main__":
	main()